{"version":3,"sources":["images/home.svg","images/grid.svg","images/coronavirus.png","components/Navbar.js","components/DynamicCountryMap.js","components/AllCountriesSummary.js","components/StatsSummary.js","http.js","services/httpServices.js","components/StatsSummaryData.js","components/CountryData.js","components/SelectCountry.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","src","AppLogo","alt","role","aria-label","aria-expanded","data-target","aria-hidden","id","HomeIcon","GridIcon","d","Date","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","formatDate","DynamicCountryMap","selectedCountry","AllCountriesSummary","countryData","Country","TotalConfirmed","toLocaleString","StatsSummary","statsSummary","NewConfirmed","TotalDeaths","NewRecovered","NewDeaths","TotalRecovered","Number","axios","create","baseURL","headers","http","get","countryname","StatsSummaryData","useState","setStatsSummary","countriesData","setCountriesData","useEffect","getTotalSummary","getCountriesData","httpServices","then","response","data","Countries","catch","e","console","log","Global","map","key","CountryData","Confirmed","Deaths","Recovered","Active","SelectCountry","setSelectedCountry","countries","setCountries","setCountryData","setLoading","fetchCountries","optionSelected","selected","target","value","length","onChange","onBlur","disabled","country","Slug","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d138aea3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home.8245e263.svg\";","module.exports = __webpack_public_path__ + \"static/media/grid.4cdd45ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/coronavirus.2e6ebfe7.png\";","import React from \"react\";\n\n// icons\nimport AppLogo from \"../images/coronavirus.png\";\nimport HomeIcon from \"../images/home.svg\";\nimport GridIcon from \"../images/grid.svg\";\n\nconst Navbar = () => {\n  const formatDate = () => {\n    const d = new Date();\n    const ye = new Intl.DateTimeFormat(\"en\", { year: \"numeric\" }).format(d);\n    const mo = new Intl.DateTimeFormat(\"en\", { month: \"short\" }).format(d);\n    const da = new Intl.DateTimeFormat(\"en\", { day: \"2-digit\" }).format(d);\n    return `${da}-${mo}-${ye}`;\n  };\n  return (\n    <nav className=\"navbar\">\n      <div className=\"container-fluid\">\n        <div className=\"brand\">\n          <a href=\"index.html\" className=\"navbar-item\">\n            <img className=\"brand-logo\" src={AppLogo} alt={AppLogo} />\n            <span>Cov19Strain</span>\n          </a>\n          <a\n            href\n            role=\"button\"\n            className=\"navbar-burger burger\"\n            aria-label=\"menu\"\n            aria-expanded=\"false\"\n            data-target=\"navMenu\"\n          >\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n          </a>\n        </div>\n        <div className=\"nav-menu\" id=\"navMenu\">\n          <div className=\"navbar-left\">\n            <a\n              className=\"navbar-item ripple active\"\n              href=\"#realtime-data-section\"\n            >\n              <span className=\"navbar-span-icon\">\n                <img src={HomeIcon} alt=\"home icon\" />\n              </span>\n              Home\n            </a>\n            <a className=\"navbar-item ripple\" href=\"#contagion-section\">\n              <span className=\"navbar-span-icon\">\n                <img src={GridIcon} alt=\"grid icon\" />\n              </span>\n              Grid\n            </a>\n          </div>\n          <div className=\"navbar-right\">\n            <div className=\"navbar-item\">\n              Last Updated at <span className=\"date-span\">{formatDate()}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, {useEffect, useState} from \"react\"\nimport { geoEqualEarth, geoPath } from \"d3-geo\"\nimport * as topojson from \"topojson-client\"\n\n//d3 js Topics for map\n// Loading and parsing TOPOJSON\n// Rendering Geographical features\n// Using different map projections\n// Rendering the projected sphere outline\n// Tweaking the map style\n// install world-atlas TOPOJSON\n// const projection = geoEqualEarth()\n//   .scale(160)\n//   .translate([ 800 / 2, 450 / 2 ])\nconst DynamicCountryMap = ({ selectedCountry }) => {\n//   const [geographies, setGeographies] = useState([])\n//   // const projection = geoMercator();\n//   // const pathGenerator = geoPath().projection(projection);\n//   useEffect(() => {\n//     json('https://unpkg.com/world-atlas@1.1.4/world/110m.json').then(worlddata => {\n//       // const countries = topojson.feature(worlddata, data.objects.countries);\n//       setGeographies(topojson.feature(worlddata, worlddata.objects.countries).features)\n//       // console.log('data',data);\n//       // console.log('data2', countries);\n//       // const paths = svg.selectAll('path').data(countries.features);\n//       // paths.enter().append('path').attr('d', d => pathGenerator(d));\n//     })\n//   }, []);\n\n  return (\n    <div className=\"country-map-wrapper\">\n      <h3>{selectedCountry}</h3>\n      {/* <svg width={ 800 } height={ 450 } viewBox=\"0 0 800 450\">\n        <g className=\"countries\">\n          {\n            geographies.map((d,i) => (\n              <path\n                key={ `path-${ i }` }\n                d={ geoPath().projection(projection)(d) }\n                className=\"country\"\n                fill={ `rgba(38,50,56,${ 1 / geographies.length * i})` }\n                stroke=\"#FFFFFF\"\n                strokeWidth={ 0.5 }\n              />\n            ))\n          }\n        </g>\n        <g className=\"markers\">\n          <circle\n            cx={ projection()([8,48])[0] }\n            cy={ projection()([8,48])[1] }\n            r={ 10 }\n            fill=\"#E91E63\"\n            className=\"marker\"\n          />\n        </g>\n      </svg> */}\n    </div>\n  );\n};\n\nexport default DynamicCountryMap;\n","import React from \"react\";\n\nconst AllCountriesSummary = ({ countryData }) => {\n  return (\n    <div className=\"top-countries-wrapper\">\n      <div className=\"top-country-wrapper\">\n        <div className=\"flex-start align-center\">\n          <span className=\"flagless\"></span>\n          <span className=\"top-country-wrapper-name\">\n            {countryData.Country}\n          </span>\n        </div>\n        <span className=\"top-country-wrapper-count\">\n          {countryData.TotalConfirmed &&\n            countryData.TotalConfirmed.toLocaleString()}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default AllCountriesSummary;\n","import React from \"react\";\n\nconst StatsSummary = ({ statsSummary: {NewConfirmed, TotalConfirmed, TotalDeaths, NewRecovered, NewDeaths, TotalRecovered} } ) => {\n  return (\n    <div>\n      <div className=\"stats-pill default\">\n        <span className=\"right-wrapper-cases-title\">Total Cases</span>\n        <div className=\"space-between\">\n          <div className=\"latest-cases\">\n            +\n            {NewConfirmed &&\n              NewConfirmed.toLocaleString()}\n          </div>\n          <span className=\"right-wrapper-cases-number\">\n            {TotalConfirmed &&\n              TotalConfirmed.toLocaleString()}\n          </span>\n        </div>\n      </div>\n      <div className=\"stats-pill activecases\">\n        <span className=\"right-wrapper-cases-title\">Active Cases</span>\n        <div className=\"space-between\">\n          <div className=\"latest-cases\">\n            +\n            {NewConfirmed &&\n              NewConfirmed.toLocaleString()}\n          </div>\n          <span className=\"right-wrapper-cases-number\">\n            {Number(\n              TotalConfirmed -\n                (TotalDeaths + TotalRecovered),\n            )}\n          </span>\n        </div>\n      </div>\n      <div className=\"stats-pill recoveries\">\n        <span className=\"right-wrapper-cases-title\">\n          Recoveries{\" \"}\n          {/* <span role=\"img\" aria-label=\"img\">\n            😁\n          </span> */}\n        </span>\n        <div className=\"space-between\">\n          <div className=\"latest-cases\">\n            +\n            {NewRecovered &&\n              NewRecovered.toLocaleString()}\n          </div>\n          <span className=\"right-wrapper-cases-number\">\n            {TotalRecovered &&\n              TotalRecovered.toLocaleString()}\n          </span>\n        </div>\n      </div>\n      <div className=\"stats-pill deaths\">\n        <span className=\"right-wrapper-cases-title\">Total Deaths</span>\n        <div className=\"space-between\">\n          <div className=\"latest-cases\">\n            +{NewDeaths && NewDeaths.toLocaleString()}\n          </div>\n          <span className=\"right-wrapper-cases-number\">\n            {TotalDeaths &&\n              TotalDeaths.toLocaleString()}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StatsSummary;\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://api.covid19api.com\",\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n","import http from \"../http\";\n\nconst getAllCountries = () => {\n  return http.get(\"/countries\");\n};\nconst getStatsDataSummary = () => {\n  return http.get(\"/summary\");\n};\nconst getSingleCountryStats = (countryname) => {\n  return http.get(`/country/${countryname}`);\n};\nexport default {\n  getAllCountries,\n  getStatsDataSummary,\n  getSingleCountryStats,\n};\n","import React, { useEffect, useState } from \"react\";\nimport AllCountriesSummary from \"./AllCountriesSummary\";\nimport StatsSummary from \"./StatsSummary\";\nimport httpServices from \"../services/httpServices\";\n\n// components to feed the data\n\nconst StatsSummaryData = () => {\n  const [statsSummary, setStatsSummary] = useState({});\n  const [countriesData, setCountriesData] = useState([]);\n  useEffect(() => {\n    getTotalSummary();\n    getCountriesData();\n  }, []);\n  const getCountriesData = () => {\n    httpServices\n      .getStatsDataSummary()\n      .then((response) => setCountriesData(response.data.Countries))\n      .catch((e) => console.log(e));\n  };\n  const getTotalSummary = () => {\n    httpServices\n      .getStatsDataSummary()\n      .then((response) => setStatsSummary(response.data.Global))\n      .then((e) => console.log(e));\n  };\n  return (\n    <div>\n      {/* <code>{JSON.stringify(statsSummary)}</code> */}\n      <StatsSummary statsSummary={statsSummary} />\n      <h3>Cases Per Country</h3>\n      {countriesData &&\n        countriesData.map((countryData) => (\n          <AllCountriesSummary\n            key={countryData.Country}\n            countryData={countryData}\n          />\n        ))}\n    </div>\n  );\n};\nexport default StatsSummaryData;\n","import React from \"react\";\n\nconst CountryData = ({countryData}) => {\n  return (\n    <div>\n      <div className=\"space-between\">\n        <div className=\"selected-country-details-card\">\n          <h1>Total Cases</h1>\n  <span className=\"warning\">{countryData.Confirmed}</span>\n        </div>\n        <div className=\"selected-country-details-card\">\n          <h1>Total Deaths</h1>\n  <span className=\"danger\">{countryData.Deaths}</span>\n        </div>\n      </div>\n      <div className=\"space-between\">\n        <div className=\"selected-country-details-card\">\n          <h1>Recoveries</h1>\n  <span className=\"success\">{countryData.Recovered}</span>\n        </div>\n        <div className=\"selected-country-details-card\">\n          <h1>Active Cases</h1>\n  <span className=\"blue\">{countryData.Active}</span>\n        </div>\n      </div>\n      <div className=\"space-between\">\n        <div className=\"selected-country-details-card\">\n          <h1>New Cases</h1>\n          <span className=\"orange\">3636636</span>\n        </div>\n        <div className=\"selected-country-details-card\">\n          <h1>New Deaths</h1>\n          <span className=\"deepred\">3636636</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CountryData;\n","import React, { useState, useEffect } from \"react\";\n\n// services\nimport httpServices from \"../services/httpServices\";\nimport CountryData from \"./CountryData\";\n\n// const yesterDayData = countryData[countryData.length - 2]\n// const todaysData = array[array.length - 1];\nconst SelectCountry = ({ setSelectedCountry }) => {\n  const [countries, setCountries] = useState([]);\n  const [countryData, setCountryData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    fetchCountries();\n  }, []);\n  const fetchCountries = () => {\n    setLoading(true);\n    httpServices\n      .getAllCountries()\n      .then((response) => {\n        setCountries(response.data);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n        setLoading(false);\n      });\n  };\n  const fetchCountryData = (target) => {\n    httpServices.getSingleCountryStats(target)\n    .then((response) => setCountryData(() => response.data[response.data.length -1])).catch((e) => console.log(e))\n  }\n  const optionSelected = (e) => {\n    const selected = e.target.value;\n    setSelectedCountry(selected);\n    fetchCountryData(selected);\n  };\n  console.log(\"countryData2\", countryData);\n  return (\n    <>\n      <select className=\"select-field\" onChange={optionSelected} onBlur={optionSelected}  disabled={countries.length === 0}>\n        <option value=\"all\">All</option>\n        {countries.map(country =>  (<option key={country.Slug} value={country.Slug}>{country.Country}</option>))}\n      </select>\n      {countryData ? <CountryData countryData={countryData} />: \"No Available Data\"}\n    </>\n   \n  );\n};\n\nexport default SelectCountry;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\n// components\nimport Navbar from \"./components/Navbar\";\nimport DynamicCountryMap from \"./components/DynamicCountryMap\";\nimport StatsSummaryData from \"./components/StatsSummaryData\";\nimport SelectCountry from \"./components/SelectCountry\";\n\nconst App = () => {\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <Navbar />\n      </div>\n      <section>\n        <div className=\"container-fluid\">\n          <div className=\"columns\">\n            <div className=\"col-3\">\n              <div className=\"right-wrapper\">\n                <h1>COVID-19 Tracker</h1>\n                <StatsSummaryData />\n              </div>\n            </div>\n            <div className=\"col-3\">\n              <div className=\"country-select-wrapper\">\n                <SelectCountry setSelectedCountry={setSelectedCountry} />\n              </div>\n            </div>\n            <div className=\"col-6\">\n              <DynamicCountryMap selectedCountry={selectedCountry} />\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}